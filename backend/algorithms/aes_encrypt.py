import copy
from typing import List, Union

class AES128:
    # ---------- AES 常量：S-box / 逆 S-box / Rcon ----------
    Sbox = [
        0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
        0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
        0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
        0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
        0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
        0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
        0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
        0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
        0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
        0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
        0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
        0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
        0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
        0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
        0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
        0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16,
    ]

    InvSbox = [
        0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,
        0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,
        0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,
        0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,
        0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,
        0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,
        0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,
        0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,
        0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,
        0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,
        0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,
        0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,
        0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,
        0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,
        0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,
        0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D,
    ]

    Rcon = [0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36]

    @staticmethod
    def xtime(a: int) -> int:
        return ((a << 1) ^ 0x1B) & 0xFF if (a & 0x80) else (a << 1) & 0xFF

    @staticmethod
    def mul(a: int, b: int) -> int:
        res = 0
        for _ in range(8):
            if b & 1:
                res ^= a
            hi = a & 0x80
            a = (a << 1) & 0xFF
            if hi:
                a ^= 0x1B
            b >>= 1
        return res & 0xFF

    @staticmethod
    def key_expansion(key: bytes) -> List[List[int]]:
        assert len(key) == 16
        Nk = 4
        Nr = 10
        w = [list(key[i*4:(i+1)*4]) for i in range(Nk)]
        for i in range(Nk, 4*(Nr+1)):
            temp = w[i-1].copy()
            if i % Nk == 0:
                temp = temp[1:] + temp[:1]
                temp = [AES128.Sbox[b] for b in temp]
                temp[0] ^= AES128.Rcon[i // Nk]
            new_word = [ (w[i-Nk][j] ^ temp[j]) & 0xFF for j in range(4) ]
            w.append(new_word)
        round_keys = []
        for r in range(Nr+1):
            rk = []
            for i in range(4):
                rk += w[r*4 + i]
            round_keys.append(rk)
        return round_keys

    @staticmethod
    def bytes2state(block: bytes) -> List[List[int]]:
        assert len(block) == 16
        state = [[0]*4 for _ in range(4)]
        for i in range(16):
            state[i%4][i//4] = block[i]
        return state

    @staticmethod
    def state2bytes(state: List[List[int]]) -> bytes:
        out = []
        for col in range(4):
            for row in range(4):
                out.append(state[row][col] & 0xFF)
        return bytes(out)

    @staticmethod
    def AddRoundKey(state: List[List[int]], round_key: List[int]) -> None:
        for col in range(4):
            for row in range(4):
                state[row][col] ^= round_key[col*4 + row]

    @staticmethod
    def SubBytes(state: List[List[int]]) -> None:
        for r in range(4):
            for c in range(4):
                state[r][c] = AES128.Sbox[state[r][c]]

    @staticmethod
    def InvSubBytes(state: List[List[int]]) -> None:
        for r in range(4):
            for c in range(4):
                state[r][c] = AES128.InvSbox[state[r][c]]

    @staticmethod
    def ShiftRows(state: List[List[int]]) -> None:
        for r in range(1, 4):
            state[r] = state[r][r:] + state[r][:r]

    @staticmethod
    def InvShiftRows(state: List[List[int]]) -> None:
        for r in range(1, 4):
            state[r] = state[r][-r:] + state[r][:-r]

    @staticmethod
    def MixColumns(state: List[List[int]]) -> None:
        for c in range(4):
            a = [state[r][c] for r in range(4)]
            state[0][c] = (AES128.mul(0x02, a[0]) ^ AES128.mul(0x03, a[1]) ^ a[2] ^ a[3]) & 0xFF
            state[1][c] = (a[0] ^ AES128.mul(0x02, a[1]) ^ AES128.mul(0x03, a[2]) ^ a[3]) & 0xFF
            state[2][c] = (a[0] ^ a[1] ^ AES128.mul(0x02, a[2]) ^ AES128.mul(0x03, a[3])) & 0xFF
            state[3][c] = (AES128.mul(0x03, a[0]) ^ a[1] ^ a[2] ^ AES128.mul(0x02, a[3])) & 0xFF

    @staticmethod
    def InvMixColumns(state: List[List[int]]) -> None:
        for c in range(4):
            a = [state[r][c] for r in range(4)]
            state[0][c] = (AES128.mul(0x0e, a[0]) ^ AES128.mul(0x0b, a[1]) ^ AES128.mul(0x0d, a[2]) ^ AES128.mul(0x09, a[3])) & 0xFF
            state[1][c] = (AES128.mul(0x09, a[0]) ^ AES128.mul(0x0e, a[1]) ^ AES128.mul(0x0b, a[2]) ^ AES128.mul(0x0d, a[3])) & 0xFF
            state[2][c] = (AES128.mul(0x0d, a[0]) ^ AES128.mul(0x09, a[1]) ^ AES128.mul(0x0e, a[2]) ^ AES128.mul(0x0b, a[3])) & 0xFF
            state[3][c] = (AES128.mul(0x0b, a[0]) ^ AES128.mul(0x0d, a[1]) ^ AES128.mul(0x09, a[2]) ^ AES128.mul(0x0e, a[3])) & 0xFF

    @staticmethod
    def encrypt_block(block: bytes, round_keys: List[List[int]]) -> bytes:
        assert len(block) == 16
        state = AES128.bytes2state(block)
        Nr = 10
        AES128.AddRoundKey(state, round_keys[0])
        for rnd in range(1, Nr):
            AES128.SubBytes(state)
            AES128.ShiftRows(state)
            AES128.MixColumns(state)
            AES128.AddRoundKey(state, round_keys[rnd])
        AES128.SubBytes(state)
        AES128.ShiftRows(state)
        AES128.AddRoundKey(state, round_keys[Nr])
        return AES128.state2bytes(state)

    @staticmethod
    def decrypt_block(block: bytes, round_keys: List[List[int]]) -> bytes:
        assert len(block) == 16
        state = AES128.bytes2state(block)
        Nr = 10
        AES128.AddRoundKey(state, round_keys[Nr])
        AES128.InvShiftRows(state)
        AES128.InvSubBytes(state)
        for rnd in range(Nr-1, 0, -1):
            AES128.AddRoundKey(state, round_keys[rnd])
            AES128.InvMixColumns(state)
            AES128.InvShiftRows(state)
            AES128.InvSubBytes(state)
        AES128.AddRoundKey(state, round_keys[0])
        return AES128.state2bytes(state)

    @staticmethod
    def pkcs7_pad(data: bytes) -> bytes:
        pad_len = 16 - (len(data) % 16)
        return data + bytes([pad_len]) * pad_len

    @staticmethod
    def pkcs7_unpad(data: bytes) -> bytes:
        if len(data) == 0 or len(data) % 16 != 0:
            raise ValueError("无效填充：长度不为块大小的倍数")
        pad_len = data[-1]
        if pad_len < 1 or pad_len > 16:
            raise ValueError("无效填充长度")
        if data[-pad_len:] != bytes([pad_len]) * pad_len:
            raise ValueError("填充校验失败")
        return data[:-pad_len]

    def __init__(self, key: bytes):
        assert isinstance(key, (bytes, bytearray)) and len(key) == 16, "key 必须为 16 字节"
        self.key = bytes(key)
        self.round_keys = AES128.key_expansion(self.key)

    def encrypt(self, plaintext: Union[str, bytes]) -> bytes:
        if isinstance(plaintext, str):
            plaintext = plaintext.encode('utf-8')
        padded = AES128.pkcs7_pad(plaintext)
        out = b''
        for i in range(0, len(padded), 16):
            blk = padded[i:i+16]
            out += AES128.encrypt_block(blk, self.round_keys)
        return out

    def decrypt(self, ciphertext: bytes) -> bytes:
        if not isinstance(ciphertext, (bytes, bytearray)):
            raise ValueError("ciphertext 必须是 bytes")
        if len(ciphertext) % 16 != 0:
            raise ValueError("密文长度不为 16 的倍数")
        out = b''
        for i in range(0, len(ciphertext), 16):
            blk = ciphertext[i:i+16]
            out += AES128.decrypt_block(blk, self.round_keys)
        return AES128.pkcs7_unpad(out)

# 示例：使用 AES 类进行测试（替换原有测试调用）
if __name__ == "__main__":
    key = b"mysecretpassword"  # 16 bytes
    aes = AES128(key)

    messages = ["Network Security", "AES Encryption Test"]
    for msg in messages:
        cipher = aes.encrypt(msg)
        plain = aes.decrypt(cipher).decode('utf-8')
        print(f"原文: {msg}")
        print(f"加密后(hex): {cipher.hex()}")
        print(f"解密后: {plain}\n")